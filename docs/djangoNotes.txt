


makemigrations command : By running make migrations we are telling Django that we have made some
changes to our model.

!!! The migrate command will only run migrations for apps in INSTALLED_APPS.

migrations are how django stores changes to our models. They are files on disk.
    polls/migrations/0001_initial.py
$python manage.py sqlmigrate <app_name>  0001 ::: takes migration name and returns their sqlmigrate

$python -m django --version ::: to check verion of django.
$django-admin startproject <project_name> ::: create a django project
$python manage.py startap <app_name> ::: to create a python app.
$python manage.py check ::: this checks for any problems in our project without making migrations or touching the database.
$python manage.py migrate ::: to create all model tables in our database
$python manage.py createsuperuser ::: create an admin user.
$python manage.py runserver ::: start the development server

Do Not Forget : django.contrib.admin is an app

Search For : django.contrib.admin.AdminSite.site_header

Remember tree step guide to making model changes.
  1- Change our models in model.py
  2- $python manage.py makemigrations
  3- $python manage.py migrate



---- Django Philosophy For Creating Models ----
 > A model is the single definitive source of information about our data.
   Django follows the DRY principle .
   The goal is to define our data model in oen place and 
   automatically derive things from it.

migrate command : it looks at the INSTALLED_APPS setting and create any necessary
database tables according to the database settings in our <project_name>:settings.py

migrate command takes all the migrations that have not been applied. Essentially, synchronizing the changes we made to our
model.

migrations are very powerfull and let us change our models overtime, as we develop our project, without
the need to delete our database or tables and make new ones. It specializing our upgraded database live without  losing data.

!!! Django tracks which ones are applied using a special table in our database called "django-migrations".


---- Django Apps ----
!!! Django apps are plugable. We can use an app in multiple projects, and we can distribute apps,
because they don't have to be tied to a given Django instance.

To include app in our project : we need to add a reference to its configuration class in the INSTALLED_APPS settings.

<app_name>/app.py : <app>Config class >>>> '<app>.app.<App>Config' to the '<project>/settings.py'

---- Use Generic Views : Less Code is Better ----
Common case of web development : 
  > Getting data from the database according to a parameter passed in the URL
  > Loading a etmplate and returning the rendered template. 
    Django provides a shortcut for common cases, called the "generic views" system.

Generic Views :
  > It is an abstrac common patterns tÄ± the point where we do not even  need to write python
   code to write on app.
  > The most direct way to use generic views is to create them directly in our URLconf.
  > If we are only change a few attributes on a class-based view, we can pass them into the
    as_view() method 
  !!! Any argument passed to as_view() will override attributes set on the class. !!!


---- Introduction to Automation Testing ----
  > Tests are simple routines that checking the operation of our code.
  > Testing operates at different levels. Some tests might apply to a tiny detail while
    others examine the overall operation of the software.
  > That is no different from the kind of testing, using the shell to examine behavior of a method,
    or running the application and extending data to check how it behaves.

What Is Different In Automated Tests :
  - The testing work is done for us by the system 
  - We create a set of tests one, and then as we make changes to our app.

Why We Need To Create Tests : 
  - To save our time 
  - In a sophisticated aoolication, we might have dozens of complex interactions  between components.
  - Identify and prevent problems.
  - To make our code more attractive.

Basic Testing Strategy :
  - There are many ways to approach unit tests. One of them is "test-driven-development".
  Test Driven Development : Write tests before write code.

  Test Driven Development may seem counter-intuitive, but in fact it's similar to what most people will often do anyway :
    Describe a problem, then create some code to solve it. Test driven developmnet simply formalizes the problem in a python test case.

Running tests ::: $python manage.py test polls

---- Time To Makeup ----
> Basically .js and .css files are makeups of the web page and in django we refer to those files as "static files"
> We can keep the static files somewhere our web server can find it. But that could be very complicated even if 
  we doing with bigger projects. For django there is a suggestion to place static files and it will be mensioned later.

> "django.contrib.staticfiles" collects static file from each of our application into a single location that can 
  easily be served in production.

First of all create a directory called "static" in our root directory of application.
Django will look for static files there.
STATIC_FILES_FINDERS : It contains a list of finders that know how to discover static files from various sources.

>One of th edefaults is 'AppDirectoriesFinder' which looks for a "static" subdirectory in each of the "INSTALLED_APPS"
>The admin site uses the same directory structure for its static files.

**** importatnt *****
Within the static directory, always create a directory with the same name as the project name 
and within that create your .js .css files
Because : 
This is the because of how "AppDirectoriesFinder" staticfile finder works. We can refer to this static file in 
Django simply as "<app_name>/style.css" for example. Similar how we reference the path for templates.

**** static file namespacing **************************************************************************************************
Just like templates, we might be able to get away with putting our static files directly in <app_name>/static/
rather than creating another <app_name> directory. BUT IT WOULD ACTUALLY BAD IDEA.
BECAUSE : 
Django will choose the first static file it finds whose name matches, and if we had a static file 
with the same name in a different application, python would be unable to distinguish between them.
We need to be able to point Django at the right one, ant the easiest way to ensure this is by namespacing them.
This is by putting those static files inside another directory named for the application.
*******************************************************************************************************************************

Adding a background image : 
  > Create a subdirectory in static files for images: 
      <app_root_dir>/static/<app_name>/images/

Warning : {%static%} template tag is not available for use in static files like our stylesheet which aren't generated by Django.
We should always use relative paths to link out static files between each other, because then we can change STATIC_URL(used by the
static template tag to generate its URLs) without having to modify a bunch of paths in our static files as well.

---- Using Templates ----
> Just like the static fikes, we could have all our templates together, in one big templates directory,
  and it would work perfectly well.
  However : Templates that belong to a particular application should be placed in that application's template directory.
            
Costumizing the admin look and feel :
- Create a "templates" directory in our project directory(the one that contains manage.py)
- Templates can live anywhere on our filesystem that Django can access. 
  However keeping our templates within the project is a good convention to follow.

settings.py:DIRS ::: List of filesystem directories to check when loading Django templates; it's a search path.

Costumizing our application's templates : 
> DIRS variable is empty by default.
  If DIRS was empty by default, how was Django finding the default admin templates???
  Answer : Since APP_DIRS is set to True.
  Django automatically looks for a "templates/" subdirectory within each application package.

Costumize tbe admin index page :
> By default it displays all the apps in  "INSTALLED_APPS" that have been registered with the admi  application,
  in alphabetical order.
> "app_list" ::: Template variable. 

But where are the django source files : $python -c "import python; print(django.__path__)"
  check the "base_site.html" and other .html pages.

Costumizing the admin form : 
> Django knows that a "Foreign Key" should be represented in the admin as a <select> box.
  Every object with a ForeignKey relationship to another gets "Add Another" link next to object in the admin form site for free.
  But really this is an inefficient way of adding objects to the system.
  It would be better  if we could add a bunch of Choices directly when we create the another object : 
    remove :: 
        admin.site.register(Choice)
    add :: 
        class ChoiceInline(admin.StackInline):
          model = Choice
          extra = 3
> admin.StackedInlne versus admin.TabularInline

> By default, Django displays the str() of each object. 
  But somethimes it'd be more helpful if we could display individual files.
  To do that;
  Use the "list_display" admin option, whish is a tuple of fields names, to display, or columns,
  on the change list page for the object.